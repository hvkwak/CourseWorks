parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
##
lower <- rep(0, 10)
upper <- rep(1, 10)
mu <- 100
lambda <- 50
##
n <- length(lower)
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
s.num <- 0
parents
evolutionaryAlgorithm <- function(f, mu, lambda, lower, upper){
n <- length(lower)
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
s.num <- 0
repeat{
## Rekombination: (1-Punkt Crossover)
child <- list()
for (k in 1:(lambda/2)) {
paar <- sample(parents, 2)
point <- round( length(parents[[1]])/2 ) ## 1-point crossover
child[[2*k-1]] <- c((paar[[1]])[1:point], (paar[[2]])[(point+1): n])
child[[2*k]] <- c((paar[[2]])[1:point], (paar[[1]])[(point+1): n])
}
## Mutation of Nachkommen: Bit-Flipping
for(k in 1:length(child)){
new.child <- bitRepresentation( child[[k]] )
Flipped.child <- bitFlipping(new.child$bitRepresentation)
child[[k]] <- integerRepresentation(Flipped.child, new.child$digits.until)
}
#########################################################
### mu from mu+lambda selection : the next generation ###
mu.plus.lambda.candidate <- c(parents, child)
candidate.memory.vec <- vector()
###
for(i in 1:length(mu.plus.lambda.candidate)){
## if lower and upper is...
if( sum( lower <= mu.plus.lambda.candidate[[i]] ) == n &&
sum( upper >= mu.plus.lambda.candidate[[i]] ) == n  ){
candidate.memory.vec <- c(candidate.memory.vec, i)
}
}
mu.plus.lambda <- mu.plus.lambda.candidate[candidate.memory.vec]
######
#print(length(mu.plus.lambda))
memory.vec <- rep(0, length(mu.plus.lambda) )
for( i in 1:length(mu.plus.lambda) ) {
memory.vec[i] <- f( as.integer(mu.plus.lambda[[i]]) )
}
index <- which(rank(memory.vec, ties.method = "first") <= mu)
new.parents <- mu.plus.lambda[index]
##########
for(i in 1:length(new.parents)){
new.parents[[i]] <- as.integer(new.parents[[i]])
}
################################################################
################################################################
s.num <- s.num + 1
## Stoppkriterium
A <- mean( apply(do.call(rbind, parents), 1, f) )
B <- mean( apply(do.call(rbind, new.parents), 1, f) )
if(A - B < 1e-30){
break
}
## parents Update
parents <- new.parents
index <- which.min( apply( do.call(rbind, parents), 1, f))
print(f(parents[[index]]))
}
## best.value index
index <- which.min( apply( do.call(rbind, parents), 1, f))
## return
return( list( best.vector = parents[[index]],
f.value = f(parents[[index]]),
repeated = s.num ) )
}
2^14
## Testen:
f <- function(x){
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10))
}
evolutionaryAlgorithm(f, 1000, 500, rep(0, 14), rep(1, 14))
rep(1, 14)
## Testen:
f <- function(x){
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10))
}
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
f(rep(1, 14))
evolutionaryAlgorithm <- function(f, mu, lambda, lower, upper){
n <- length(lower)
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
s.num <- 0
repeat{
## Rekombination: (1-Punkt Crossover)
child <- list()
for (k in 1:(lambda/2)) {
paar <- sample(parents, 2)
point <- round( length(parents[[1]])/2 ) ## 1-point crossover
child[[2*k-1]] <- c((paar[[1]])[1:point], (paar[[2]])[(point+1): n])
child[[2*k]] <- c((paar[[2]])[1:point], (paar[[1]])[(point+1): n])
}
## Mutation of Nachkommen: Bit-Flipping
for(k in 1:length(child)){
new.child <- bitRepresentation( child[[k]] )
Flipped.child <- bitFlipping(new.child$bitRepresentation)
child[[k]] <- integerRepresentation(Flipped.child, new.child$digits.until)
}
#########################################################
### mu from mu+lambda selection : the next generation ###
mu.plus.lambda.candidate <- c(parents, child)
candidate.memory.vec <- vector()
###
for(i in 1:length(mu.plus.lambda.candidate)){
## if lower and upper is...
if( sum( lower <= mu.plus.lambda.candidate[[i]] ) == n &&
sum( upper >= mu.plus.lambda.candidate[[i]] ) == n  ){
candidate.memory.vec <- c(candidate.memory.vec, i)
}
}
mu.plus.lambda <- mu.plus.lambda.candidate[candidate.memory.vec]
######
#print(length(mu.plus.lambda))
memory.vec <- rep(0, length(mu.plus.lambda) )
for( i in 1:length(mu.plus.lambda) ) {
memory.vec[i] <- f( as.integer(mu.plus.lambda[[i]]) )
}
index <- which(rank(memory.vec, ties.method = "first") <= mu)
new.parents <- mu.plus.lambda[index]
##########
for(i in 1:length(new.parents)){
new.parents[[i]] <- as.integer(new.parents[[i]])
}
################################################################
################################################################
s.num <- s.num + 1
## Stoppkriterium
A <- mean( apply(do.call(rbind, parents), 1, f) )
B <- mean( apply(do.call(rbind, new.parents), 1, f) )
if(A - B < 1e-30){
break
}
## parents Update
parents <- new.parents
index <- which.min( apply( do.call(rbind, parents), 1, f))
print(f(parents[[index]]))
}
## best.value index
index <- which.min( apply( do.call(rbind, parents), 1, f))
## return
return( list( best.vector = parents[[index]],
f.value = f(parents[[index]]),
repeated = s.num ) )
}
## Testen:
f <- function(x){
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10))
}
f <- function(x){
return(sum(x))
}
evolutionaryAlgorithm(f, 2000, 500, rep(0, 14), rep(1, 14))
## Testen:
f <- function(x){
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10))
}
evolutionaryAlgorithm(f, 2000, 500, rep(0, 14), rep(1, 14))
f <- function(x){
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10))
}
myES(f=f, n=100, my=100, lambda=100, generations = 20)
## Testen:
f <- function(x){
if (sum(x == 0) == length(x)){
return(200000)
}
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10))
}
evolutionaryAlgorithm(f, 2000, 500, rep(0, 14), rep(1, 14))
##### Aufgabe 1)
lm.k.fold <- function(data, target, k){
## k: the number of folds
S <- nrow(data) ## number of the sample size
E <- ceiling(S/k) ## the number of Elements in a fold.
index.mat <- matrix(c(sample(1:S, S), rep(NA, E*k-S)),
nrow = k, ncol= E, byrow=TRUE)
MSE.vec <- rep(0, k)
## lm()
for(i in 1:k){
## leave this out.
x <- data[ index.mat[i,][!is.na(index.mat[i,])], ]
y <- target[ index.mat[i,][!is.na(index.mat[i,])] ]
X <- data[-index.mat[i,][!is.na(index.mat[i,])],]
target.y <- target[-index.mat[i,][!is.na(index.mat[i,])]]
var.name <- paste(colnames(X), collapse = "+")
form <- as.formula(paste("target.y", var.name, sep = " ~ "))
fit.lm <- lm(formula = form, data = cbind(X, target.y) )
#print(summary(fit.lm)$adj.r.squared)
y.hat.vec <- as.matrix(cbind(1, x))%*%fit.lm$coef
MSE.vec[i] <- sum((y.hat.vec - y)^2) / length(y.hat.vec)
}
return(mean(MSE.vec))
}
evolutionaryAlgorithm <- function(f, mu, lambda, lower, upper){
print("a")
n <- length(lower)
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
s.num <- 0
repeat{
print("b")
## Rekombination: (1-Punkt Crossover)
child <- list()
for (k in 1:(lambda/2)) {
paar <- sample(parents, 2)
point <- round( length(parents[[1]])/2 ) ## 1-point crossover
child[[2*k-1]] <- c((paar[[1]])[1:point], (paar[[2]])[(point+1): n])
child[[2*k]] <- c((paar[[2]])[1:point], (paar[[1]])[(point+1): n])
}
## Mutation of Nachkommen: Bit-Flipping
for(k in 1:length(child)){
new.child <- bitRepresentation( child[[k]] )
Flipped.child <- bitFlipping(new.child$bitRepresentation)
child[[k]] <- integerRepresentation(Flipped.child, new.child$digits.until)
}
#########################################################
### mu from mu+lambda selection : the next generation ###
mu.plus.lambda.candidate <- c(parents, child)
candidate.memory.vec <- vector()
###
for(i in 1:length(mu.plus.lambda.candidate)){
## if lower and upper is...
if( sum( lower <= mu.plus.lambda.candidate[[i]] ) == n &&
sum( upper >= mu.plus.lambda.candidate[[i]] ) == n  ){
candidate.memory.vec <- c(candidate.memory.vec, i)
}
}
mu.plus.lambda <- mu.plus.lambda.candidate[candidate.memory.vec]
######
#print(length(mu.plus.lambda))
memory.vec <- rep(0, length(mu.plus.lambda) )
for( i in 1:length(mu.plus.lambda) ) {
memory.vec[i] <- f( as.integer(mu.plus.lambda[[i]]) )
}
index <- which(rank(memory.vec, ties.method = "first") <= mu)
new.parents <- mu.plus.lambda[index]
##########
for(i in 1:length(new.parents)){
new.parents[[i]] <- as.integer(new.parents[[i]])
}
################################################################
################################################################
s.num <- s.num + 1
print("c")
## Stoppkriterium
A <- mean( apply(do.call(rbind, parents), 1, f) )
B <- mean( apply(do.call(rbind, new.parents), 1, f) )
if(A - B < 1e-30){
break
}
## parents Update
parents <- new.parents
index <- which.min( apply( do.call(rbind, parents), 1, f))
print(f(parents[[index]]))
}
## best.value index
index <- which.min( apply( do.call(rbind, parents), 1, f))
## return
return( list( best.vector = parents[[index]],
f.value = f(parents[[index]]),
repeated = s.num ) )
}
## Testen:
f <- function(x){
if (sum(x == 0) == length(x)){
return(2000000)
}else{
variable.index <- (1:14)[x==1]
#lm.k.fold(bic.data[, variable.index], bic.data[, 15], 10)
return(lm.k.fold(bic.data[, variable.index], bic.data[, 15], 5))
}
}
evolutionaryAlgorithm(f, 2000, 500, rep(0, 14), rep(1, 14))
upper <- rep(0, 14)
upper <- rep(1, 14)
lower <- rep(0, 14)
n <- length(lower)
parents <- list()
mu <- 100
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
parents
bitRepresentation(c(1, 2))
upper <- rep(1, 14)
lower <- rep(0, 14)
n <- length(lower)
mu <- 100
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
parents
parents[[1]]
length(parents[[1]])
sample(0:1)
sample(0:1, 1)
sample(0:1, 1)
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
parents
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
sample(0:1, 14, replace = TRUE)
## parents
parents <- list()
for (i in 1:mu){
memory.vec <- as.integer(rep(0, n))
for (k in 1:n){
memory.vec[k] <- sample(lower[k]:upper[k], 1)
#print(typeof(memory.vec[k]))
}
parents[[i]] <- memory.vec
}
parents
#sample(0:1, 14, replace = TRUE)
mu
sample(0:1, n*mu, replace = TRUE)
matrix(sample(0:1, n*mu, replace = TRUE), ncol = n, nrow = mu)
## Rekombination: (1-Punkt Crossover)
child <- list()
lambda <- 50
1:(lambda/2)
sample(parents, 2)
parents
upper <- rep(1, 14)
lower <- rep(0, 14)
n <- length(lower)
mu <- 100 ## number of parents
parents <- list()
#sample(0:1, 14, replace = TRUE)
sample(0:1, n*mu, replace = TRUE)
parents <- matrix(sample(0:1, n*mu, replace = TRUE), ncol = n, nrow = mu)
parents
sample(parents, 2)
parents
sample(1:mu)
sample(1:mu, 2)
parents[sample(1:mu, 2), ]
round(n/2)
# s.num <- 0
kk <- matrix(0, ncol = 10, nrow = 5)
kk
kk[1,] <- rep(1, 10)
kk
## Rekombination: (1-Punkt Crossover)
child <- matrix(0, ncol = n, nrow = lambda)
for (k in 1:(lambda/2)) {
paar <- parents[sample(1:mu, 2), ]
point <- round(n/2) ## 1-point crossover
child[2*k-1, ] <- c(paar[1,][1:point], paar[2,][point+1:n])
child[2*k, ] <- c(paar[2,][1:point], paar[1,][point+1:n])
#child[[2*k-1]] <- c((paar[[1]])[1:point], (paar[[2]])[(point+1): n])
#child[[2*k]] <- c((paar[[2]])[1:point], (paar[[1]])[(point+1): n])
}
upper <- rep(1, 14)
lower <- rep(0, 14)
n <- length(lower)
mu <- 100 ## number of parents
parents <- list()
#sample(0:1, 14, replace = TRUE)
sample(0:1, n*mu, replace = TRUE)
parents <- matrix(sample(0:1, n*mu, replace = TRUE), ncol = n, nrow = mu)
## Rekombination: (1-Punkt Crossover)
child <- matrix(0, ncol = n, nrow = lambda)
lambda <- 50 ## number of child
for (k in 1:(lambda/2)) {
paar <- parents[sample(1:mu, 2), ]
point <- round(n/2) ## 1-point crossover
child[2*k-1, ] <- c(paar[1,][1:point], paar[2,][point+1:n])
child[2*k, ] <- c(paar[2,][1:point], paar[1,][point+1:n])
#child[[2*k-1]] <- c((paar[[1]])[1:point], (paar[[2]])[(point+1): n])
#child[[2*k]] <- c((paar[[2]])[1:point], (paar[[1]])[(point+1): n])
}
c(paar[1,][1:point], paar[2,][point+1:n])
paar[1,][1:point]
paar[2,][point+1:n]
n
paar[2,]
parents
parents[2,]
sample(1:mu, 2)
parents[sample(1:mu, 2), ]
paar[2,][point+1:n]
paar[2,][(point+1):n]
upper <- rep(1, 14)
lower <- rep(0, 14)
n <- length(lower)
mu <- 100 ## number of parents
parents <- list()
#sample(0:1, 14, replace = TRUE)
sample(0:1, n*mu, replace = TRUE)
parents <- matrix(sample(0:1, n*mu, replace = TRUE), ncol = n, nrow = mu)
## Rekombination: (1-Punkt Crossover)
child <- matrix(0, ncol = n, nrow = lambda)
lambda <- 50 ## number of child
for (k in 1:(lambda/2)) {
paar <- parents[sample(1:mu, 2), ]
point <- round(n/2) ## 1-point crossover
child[2*k-1, ] <- c(paar[1,][1:point], paar[2,][(point+1):n])
child[2*k, ] <- c(paar[2,][1:point], paar[1,][(point+1):n])
#child[[2*k-1]] <- c((paar[[1]])[1:point], (paar[[2]])[(point+1): n])
#child[[2*k]] <- c((paar[[2]])[1:point], (paar[[1]])[(point+1): n])
}
child
